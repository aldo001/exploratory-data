ls
pwd
library("XLConnect", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("XLConnectJars", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("xlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(rjava)
"rJava"
install.packages("rjava")
install.packages("rJava")
library(rJava)
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("xlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("XLConnect", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
sessioninfo()
loadNamespace()
devtools::check()
install.packages("devtools")
devtools::check()
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
devtools::check()
install.packages("rlang")
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("xlsx")
library("xlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("rJava")
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
launchd
$ /usr/libexec/java_home
install.packages("rJava")
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
$ which java
remove.packages(rjava)
remove.packages(rjava)
remove.packages(rJava)
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
remove.packages(rJava)
sudo R CMD javareconf
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("rJava")
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("rJava")
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:rJava", unload=TRUE)
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("xlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("XLConnect", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("XLConnectJars", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("XLConnect", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("xlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("rlang")
install.packages("survival")
install.packages("foreign")
if(!file.exists("data")){dir.create('data')}
fileUrl <- "https://data.baltimorecity.gov/Transportation/Baltimore-Fixed-Speed-Cameras/dz54-2aru/rows.xlsx?accesstype=Download"
download.file(fileUrl,destfile = "./data/cameras.xlsx"method = "curl")
download.file(fileUrl,destfile= "./data/cameras.xlsx",method = "curl")
library (xlsx)
cameraData <- read.xlsx("./data/cameras.xlsx", sheetIndex = 1,header = TRUE)
cameraData <- read.xlsx("./data/cameras.xlsx", sheetIndex = 1,header = TRUE)
#install.packages("jsonlite")
library(jsonlite)
#install.packages("httpuv")
library(httpuv)
#install.packages("httr")
library(httr)
# Can be github, linkedin etc depending on application
oauth_endpoints("github")
# Change based on what you
myapp <- oauth_app(appname = "Coursera_App",
key = "5e943787b9976f2cd355",
secret = "acae52fc1b02f1772eb3ddaf17a272a206f6f70b")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
# Subset data.frame
gitDF[gitDF$full_name == "jtleek/datasharing", "created_at"]
library(httpuv)
> #install.packages("jsonlite")
> library(jsonlite)
> #install.packages("httpuv")
> #library(httpuv)
##Error in library(httpuv) : there is no package called ‘httpuv’
> #install.packages("httr")
> library(httr)
>
> # Can be github, linkedin etc depending on application
> oauth_endpoints("github")
<oauth_endpoint>
authorize: https://github.com/login/oauth/authorize
access:    https://github.com/login/oauth/access_token
>
> # Change based on what you
> myapp <- oauth_app(appname = "Coursera_App",
+                    key = "5e943787b9976f2cd355",
+                    secret = "acae52fc1b02f1772eb3ddaf17a272a206f6f70b")
>
> # Get OAuth credentials
> github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at
#    https://github.com/settings/developers. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("Coursera_App",
key = "5e943787b9976f2cd355",
secret = "acae52fc1b02f1772eb3ddaf17a272a206f6f70b")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at
#    https://github.com/settings/developers. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("Coursera_App",
key = "5e943787b9976f2cd355",
secret = "acae52fc1b02f1772eb3ddaf17a272a206f6f70b")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("Coursera_Appb",
key = "5e943787b9976f2cd355",
secret = "acae52fc1b02f1772eb3ddaf17a272a206f6f70b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
output <- content(req)
datashare <- which(sapply(output, FUN=function(X) "datasharing" %in% X))
datashare
list(output[[15]]$name, output[[15]]$created_at)
library(httr)
<oauth_endpoint>
authorize: https://github.com/login/oauth/authorize
access:    https://github.com/login/oauth/access_token
<oauth_endpoint>
authorize: https://github.com/login/oauth/authorize
access:    https://github.com/login/oauth/access_token
oauth_endpoints("github")
myapp <- oauth_app("Coursera_App",
key = "5e943787b9976f2cd355",
secret = "acae52fc1b02f1772eb3ddaf17a272a206f6f70b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
output <- content(req)
datashare <- which(sapply(output, FUN=function(X) "datasharing" %in% X))
datashare
#install.packages("jsonlite")
library(jsonlite)
#install.packages("httpuv")
library(httpuv)
#install.packages("httr")
library(httr)
# Can be github, linkedin etc depending on application
oauth_endpoints("github")
# Change based on what you
myapp <- oauth_app(appname = "Coursera_App",
key = "5e943787b9976f2cd355",
secret = "acae52fc1b02f1772eb3ddaf17a272a206f6f70b")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
# Subset data.frame
gitDF[gitDF$full_name == "jtleek/datasharing", "created_at"]
library(httr)
require(httpuv)
require(jsonlite)
oauth_endpoints("github")
myapp <- oauth_app("Coursera_App",
key = "5e943787b9976f2cd355",
secret = "acae52fc1b02f1772eb3ddaf17a272a206f6f70b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
2
3
4
5
6
req <- GET("https://api.github.com/users/jtleek/repos",
config(token = github_token))
stop_for_status(req)
output <- content(req)
jsondata <- fromJSON(toJSON(output))
subset(jsondata, name == "datasharing", select = c(created_at))
library(httr)
require(httpuv)
require(jsonlite)
oauth_endpoints("github")
myapp <- oauth_app("Coursera_App",
key = "5e943787b9976f2cd355",
secret = "acae52fc1b02f1772eb3ddaf17a272a206f6f70b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos",
config(token = github_token))
stop_for_status(req)
output <- content(req)
jsondata <- fromJSON(toJSON(output))
subset(jsondata, name == "datasharing", select = c(created_at))
#install.packages("jsonlite")
library(jsonlite)
#install.packages("httpuv")
library(httpuv)
#install.packages("httr")
library(httr)
# Can be github, linkedin etc depending on application
oauth_endpoints("github")
# Change based on what you
myapp <- oauth_app(appname = "Coursera_App",
key = "5e943787b9976f2cd355",
secret = "acae52fc1b02f1772eb3ddaf17a272a206f6f70b")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
# Subset data.frame
gitDF[gitDF$full_name == "jtleek/datasharing", "created_at"]
gitDF[gitDF$full_name == "jtleek/datasharing", "created_at"]
req <- GET("https://api.github.com/users/jtleek/repos",
config(token = github_token))
stop_for_status(req)
output <- content(req)
jsondata <- fromJSON(toJSON(output))
subset(jsondata, name == "datasharing", select = c(created_at))
myapp <- oauth_app("github", "5e943787b9976f2cd355", "acae52fc1b02f1772eb3ddaf17a272a206f6f70b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
# process data in JSON format
install.packages("rjson")
library(rjson)
json <- content(req)
json1 <- jsonlite::fromJSON(toJSON(json))
json1[which(json1$name == "datasharing"),]$created_at
View(gtoken)
myapp <- oauth_app("github", "5e943787b9976f2cd355", "acae52fc1b02f1772eb3ddaf17a272a206f6f70b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
# process data in JSON format
install.packages("rjson")
library(rjson)
json <- content(req)
json1 <- jsonlite::fromJSON(toJSON(json))
json1[which(json1$name == "datasharing"),]$created_at
install.packages("rjson")
myapp <- oauth_app("github", "5e943787b9976f2cd355", "acae52fc1b02f1772eb3ddaf17a272a206f6f70b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
# process data in JSON format
install.packages("rjson")
library(rjson)
json <- content(req)
json1 <- jsonlite::fromJSON(toJSON(json))
json1[which(json1$name == "datasharing"),]$created_at
install.packages("rjson")
myapp <- oauth_app("github", "5e943787b9976f2cd355", "acae52fc1b02f1772eb3ddaf17a272a206f6f70b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
# process data in JSON format
install.packages("rjson")
library(rjson)
json <- content(req)
json1 <- jsonlite::fromJSON(toJSON(json))
json1[which(json1$name == "datasharing"),]$created_at
myapp <- oauth_app("Coursera_Apb", "5e943787b9976f2cd355", "acae52fc1b02f1772eb3ddaf17a272a206f6f70b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
# process data in JSON format
install.packages("rjson")
library(rjson)
json <- content(req)
json1 <- jsonlite::fromJSON(toJSON(json))
json1[which(json1$name == "datasharing"),]$created_at
install.packages("rjson")
myapp <- oauth_app("github", "5e943787b9976f2cd355", "acae52fc1b02f1772eb3ddaf17a272a206f6f70b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
# process data in JSON format
#install.packages("rjson")
library(rjson)
json <- content(req)
json1 <- jsonlite::fromJSON(toJSON(json))
json1[which(json1$name == "datasharing"),]$created_at
myapp <- oauth_app("github", "5e943787b9976f2cd355", "acae52fc1b02f1772eb3ddaf17a272a206f6f70b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
myapp <- oauth_app("github", "5e943787b9976f2cd355", "acae52fc1b02f1772eb3ddaf17a272a206f6f70b")
oauth_endpoints
oauth_endpoints("github")
setwd("~/datasciencecoursera/EXPLORATORY DATA")
dataFile <- "./data/household_power_consumption.txt"
data <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
#str(subSetData)
globalActivePower <- as.numeric(subSetData$Global_active_power)
png("plot1.png", width=480, height=480)
hist(globalActivePower, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
dev.off()
dataFile <- "./data/household_power_consumption.txt"
data <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
#str(subSetData)
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(subSetData$Global_active_power)
png("plot2.png", width=480, height=480)
plot(datetime, globalActivePower, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
dataFile <- "./data/household_power_consumption.txt"
data <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
#str(subSetData)
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(subSetData$Global_active_power)
subMetering1 <- as.numeric(subSetData$Sub_metering_1)
subMetering2 <- as.numeric(subSetData$Sub_metering_2)
subMetering3 <- as.numeric(subSetData$Sub_metering_3)
png("plot3.png", width=480, height=480)
plot(datetime, subMetering1, type="l", ylab="Energy Submetering", xlab="")
lines(datetime, subMetering2, type="l", col="red")
lines(datetime, subMetering3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, lwd=2.5, col=c("black", "red", "blue"))
dev.off()
dataFile <- "./data/household_power_consumption.txt"
data <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
#str(subSetData)
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(subSetData$Global_active_power)
globalReactivePower <- as.numeric(subSetData$Global_reactive_power)
voltage <- as.numeric(subSetData$Voltage)
subMetering1 <- as.numeric(subSetData$Sub_metering_1)
subMetering2 <- as.numeric(subSetData$Sub_metering_2)
subMetering3 <- as.numeric(subSetData$Sub_metering_3)
png("plot4.png", width=480, height=480)
par(mfrow = c(2, 2))
plot(datetime, globalActivePower, type="l", xlab="", ylab="Global Active Power", cex=0.2)
plot(datetime, voltage, type="l", xlab="datetime", ylab="Voltage")
plot(datetime, subMetering1, type="l", ylab="Energy Submetering", xlab="")
lines(datetime, subMetering2, type="l", col="red")
lines(datetime, subMetering3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=, lwd=2.5, col=c("black", "red", "blue"), bty="o")
plot(datetime, globalReactivePower, type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off()
